
#include <iostream>
#include <vector>

#include "EventModel/EventModel.h"
#include "EventModel/Event.h"
#include "EventModel/EventHeader.h"

#include "EvtRecEvent/EvtRecEvent.h"
#include "EvtRecEvent/EvtRecTrack.h"

#include "TMath.h"
#include "TROOT.h"
#include "TRandom.h"

#include "CLHEP/Random/RandGauss.h"
#include "CLHEP/Vector/ThreeVector.h"
#include "CLHEP/Vector/LorentzVector.h"
#include "CLHEP/Vector/TwoVector.h"

using CLHEP::Hep3Vector;
using CLHEP::Hep2Vector;
using CLHEP::HepLorentzVector;

#include "CLHEP/Geometry/Point3D.h"
#ifndef ENABLE_BACKWARDS_COMPATIBILITY
   typedef HepGeom::Point3D<double> HepPoint3D;
#endif

#include "TrackCorrection/TrackCorrection.h"

using namespace std;

//-------------------------------------------------------------------------
TrackCorrection::TrackCorrection(int period) {
//-------------------------------------------------------------------------
   if ( period == 0 ) {
      cout << "INFO: TrackCorrection for Psi' -> K+K-pi+pi- (2009)"
           << endl;
      pip_mu  = {0.04,  0.12, 0.49}; // pi+
      pip_sig = {1.17,  1.20, 1.14};
      pim_mu  = {0.03, -0.10, 0.49}; // pi-
      pim_sig = {1.17,  1.20, 1.14};
      Kp_mu   = {0.01,  0.12, 0.53}; // K+
      Kp_sig  = {1.17,  1.18, 1.14};
      Km_mu   = {0.06, -0.07, 0.53}; // K-
      Km_sig  = {1.18,  1.18, 1.12};
   } else if ( period == 1 ) {
      cout << "INFO: TrackCorrection for Psi' -> K+K-pi+pi- (2012)"
           << endl;
      pip_mu  = {-0.02,  0.30, -0.06}; // pi+
      pip_sig = { 1.18,  1.21,  1.13};
      pim_mu  = { 0.01, -0.31, -0.07}; // pi-
      pim_sig = { 1.18,  1.21,  1.12};
      Kp_mu   = {-0.05,  0.31, -0.07}; // K+
      Kp_sig  = { 1.20,  1.21,  1.14};
      Km_mu   = { 0.05, -0.30, -0.06}; // K-
      Km_sig  = { 1.20,  1.31,  1.14};
   } else {
      cout << "FATAL ERROR in TrackCorrection:: period= "
           << period << " is not defined yet" << endl;
      exit(EXIT_FAILURE);
   }
}

//-------------------------------------------------------------------------
TrackCorrection::~TrackCorrection(){}
//-------------------------------------------------------------------------

//*************************************************************************
// *****************************************************************
// ** A macro to create correlated Gaussian-distributed variables **
// *****************************************************************

// corset(): sets up the generation by calculating C from V.
//-------------------------------------------------------------------------
void TrackCorrection::corset(HepSymMatrix &V, HepMatrix &C, int n)
//-------------------------------------------------------------------------
{
  double sum;

  // Compute square root of matrix sigma
  for (int j=0; j<n; j++) {
    sum = 0;
    for (int k=0; k<j; k++) {
      sum = sum + C[j][k]*C[j][k];

    }
    C[j][j] = sqrt(abs(V[j][j] - sum));
    // Off Diagonal terms
    for (int i=j+1; i<n; i++) {
      sum = 0;
      for (int k=0; k<j; k++) {
        sum = sum + C[i][k]*C[j][k];
      }
      C[i][j] = (V[i][j] - sum)/C[j][j];
    }
  }
}

// corgen(): generates a set of n random numbers Gaussian-distributed with covariance
// matrix V (V = C*C') and mean values zero.
//-------------------------------------------------------------------------
void TrackCorrection::corgen(HepMatrix &C, HepVector &x, int n)
//-------------------------------------------------------------------------
{
  int i,j;
  int nmax = 3;

  if (n > nmax ) {
    printf("Error in corgen: array overflown");
  }

  double tmp[3];
  for(int p = 0 ; p < n; p ++){
      tmp[p] = gRandom->Gaus(0,1);
  }
  for ( i=0; i<n; i++) {
    x[i] = 0.0;
    for (j=0; j<=i; j++) {
      x[i] = x[i]+C[i][j]*tmp[j];
    }
  }
}

//-------------------------------------------------------------------------
void TrackCorrection::calibration(RecMdcKalTrack* trk, HepVector& wtrk, int n) {
//-------------------------------------------------------------------------
   // order of helix parameters: d0, phi0, kappa = 1/Pt, dz, tan(lambda)

   HepSymMatrix wep_zerr(5,0);
     wep_zerr = trk->getZErrorE();
     HepSymMatrix wep_zcal(3,0);

     wep_zcal[0][0] = (ep_calerr_d2[1]*ep_calerr_d2[1]-1)*wep_zerr[1][1];
     wep_zcal[1][1] = (ep_calerr_d2[2]*ep_calerr_d2[2]-1)*wep_zerr[2][2];
     wep_zcal[2][2] = (ep_calerr_d2[4]*ep_calerr_d2[4]-1)*wep_zerr[4][4];

     HepMatrix wep_zerrc(3,3,0);
     TrackCorrection::corset(wep_zcal,wep_zerrc,3);
     HepVector wep_zgen(3,0);
     TrackCorrection::corgen(wep_zerrc,wep_zgen,3);

     wtrk_zHel[0] = trk->getZHelixE()[0];
     wtrk_zHel[1] = trk->getZHelixE()[1]+ep_calmean_d2[1]*sqrt(wep_zerr[1][1])+wep_zgen[0];
     wtrk_zHel[2] = trk->getZHelixE()[2]+ep_calmean_d2[2]*sqrt(wep_zerr[2][2])+wep_zgen[1];
     wtrk_zHel[3] = trk->getZHelixE()[3];
     wtrk_zHel[4] = trk->getZHelixE()[4]+ep_calmean_d2[4]*sqrt(wep_zerr[4][4])+wep_zgen[2];

   //
   HepVector pip_calerr_d2(5,0);
   HepVector pim_calerr_d2(5,0);
   HepVector kp_calerr_d2(5,0);
   HepVector km_calerr_d2(5,0);
   HepVector prtp_calerr_d2(5,0);
   HepVector prtm_calerr_d2(5,0);
   HepVector ep_calerr_d2(5,0);
   HepVector em_calerr_d2(5,0);
   HepVector mup_calerr_d2(5,0);
   HepVector mum_calerr_d2(5,0);

   pip_calerr_d2[0] = 1.0;//664p01 omega chicj
   pip_calerr_d2[1] = 1.16;
   pip_calerr_d2[2] = 1.13;
   pip_calerr_d2[3] = 1.0;
   pip_calerr_d2[4] = 1.10;

   pim_calerr_d2[0] = 1.0;
   pim_calerr_d2[1] = 1.16;
   pim_calerr_d2[2] = 1.13;
   pim_calerr_d2[3] = 1.0;
   pim_calerr_d2[4] = 1.09;

   kp_calerr_d2[0] = 1.0; //664p01 omega chicj
   kp_calerr_d2[1] = 1.17;
   kp_calerr_d2[2] = 1.12;
   kp_calerr_d2[3] = 1.0;
   kp_calerr_d2[4] = 1.08;

   km_calerr_d2[0] = 1.0;
   km_calerr_d2[1] = 1.16;
   km_calerr_d2[2] = 1.13;
   km_calerr_d2[3] = 1.0;
   km_calerr_d2[4] = 1.09;

   prtp_calerr_d2[0] = 1.0;
   prtp_calerr_d2[1] = 1.125;
   prtp_calerr_d2[2] = 1.168;
   prtp_calerr_d2[3] = 1.0;
   prtp_calerr_d2[4] = 1.090;

   prtm_calerr_d2[0] = 1.0;
   prtm_calerr_d2[1] = 1.107;
   prtm_calerr_d2[2] = 1.112;
   prtm_calerr_d2[3] = 1.0;
   prtm_calerr_d2[4] = 1.062;

   mup_calerr_d2[0] = 1.0; //663p01 eta jpsi
   mup_calerr_d2[1] = 1.19;
   mup_calerr_d2[2] = 1.09;
   mup_calerr_d2[3] = 1.0;
   mup_calerr_d2[4] = 1.09;

   mum_calerr_d2[0] = 1.0;
   mum_calerr_d2[1] = 1.18;
   mum_calerr_d2[2] = 1.11;
   mum_calerr_d2[3] = 1.0;
   mum_calerr_d2[4] = 1.08;

   ep_calerr_d2[0] = 1.0; //663p01 eta jpsi
   ep_calerr_d2[1] = 1.10;
   ep_calerr_d2[2] = 1.01;
   ep_calerr_d2[3] = 1.0;
   ep_calerr_d2[4] = 0.98;

   em_calerr_d2[0] = 1.0;
   em_calerr_d2[1] = 1.10;
   em_calerr_d2[2] = 1.04;
   em_calerr_d2[3] = 1.0;
   em_calerr_d2[4] = 1.02;


   HepVector pip_calmean_d2(5,0);
   HepVector pim_calmean_d2(5,0);
   HepVector kp_calmean_d2(5,0);
   HepVector km_calmean_d2(5,0);
   HepVector prtp_calmean_d2(5,0);
   HepVector prtm_calmean_d2(5,0);
   HepVector mup_calmean_d2(5,0);
   HepVector mum_calmean_d2(5,0);
   HepVector ep_calmean_d2(5,0);
   HepVector em_calmean_d2(5,0);

   pip_calmean_d2[0] = 0;
   pip_calmean_d2[1] = 0;
   pip_calmean_d2[2] = 0;
   pip_calmean_d2[3] = 0;
   pip_calmean_d2[4] = 0;

   pim_calmean_d2[0] = 0;
   pim_calmean_d2[1] = 0;
   pim_calmean_d2[2] = 0;
   pim_calmean_d2[3] = 0;
   pim_calmean_d2[4] = 0;

   kp_calmean_d2[0] = 0;
   kp_calmean_d2[1] = 0;
   kp_calmean_d2[2] = 0;
   kp_calmean_d2[3] = 0;
   kp_calmean_d2[4] = 0;

   km_calmean_d2[0] = 0;
   km_calmean_d2[1] = 0;
   km_calmean_d2[2] = 0;
   km_calmean_d2[3] = 0;
   km_calmean_d2[4] = 0;

   prtp_calmean_d2[0] = 0;
   prtp_calmean_d2[1] = 0;
   prtp_calmean_d2[2] = 0;
   prtp_calmean_d2[3] = 0;
   prtp_calmean_d2[4] = 0;

   prtm_calmean_d2[0] = 0;
   prtm_calmean_d2[1] = 0;
   prtm_calmean_d2[2] = 0;
   prtm_calmean_d2[3] = 0;
   prtm_calmean_d2[4] = 0;

   mup_calmean_d2[0] = 0;
   mup_calmean_d2[1] = 0;
   mup_calmean_d2[2] = 0;
   mup_calmean_d2[3] = 0;
   mup_calmean_d2[4] = 0;

   mum_calmean_d2[0] = 0;
   mum_calmean_d2[1] = 0;
   mum_calmean_d2[2] = 0;
   mum_calmean_d2[3] = 0;
   mum_calmean_d2[4] = 0;

   ep_calmean_d2[0] = 0;
   ep_calmean_d2[1] = 0;
   ep_calmean_d2[2] = 0;
   ep_calmean_d2[3] = 0;
   ep_calmean_d2[4] = 0;

   em_calmean_d2[0] = 0;
   em_calmean_d2[1] = 0;
   em_calmean_d2[2] = 0;
   em_calmean_d2[3] = 0;
   em_calmean_d2[4] = 0;

  if(trk->charge()>0 && n==0){
//ep

  }

  if(trk->charge()<0 && n==0)
  {
  //em
     HepSymMatrix wem_zerr(5,0);
     wem_zerr = trk->getZErrorE();

     HepSymMatrix wem_zcal(3,0);

     wem_zcal[0][0] = (em_calerr_d2[1]*em_calerr_d2[1]-1)*wem_zerr[1][1];
     wem_zcal[1][1] = (em_calerr_d2[2]*em_calerr_d2[2]-1)*wem_zerr[2][2];
     wem_zcal[2][2] = (em_calerr_d2[4]*em_calerr_d2[4]-1)*wem_zerr[4][4];

     HepMatrix wem_zerrc(3,3,0);
     TrackCorrection::corset(wem_zcal,wem_zerrc,3);
     HepVector wem_zgen(3,0);
     TrackCorrection::corgen(wem_zerrc,wem_zgen,3);


     wtrk_zHel[0] = trk->getZHelixE()[0];
     wtrk_zHel[1] = trk->getZHelixE()[1]+em_calmean_d2[1]*sqrt(wem_zerr[1][1])+wem_zgen[0];
     wtrk_zHel[2] = trk->getZHelixE()[2]+em_calmean_d2[2]*sqrt(wem_zerr[2][2])+wem_zgen[1];
     wtrk_zHel[3] = trk->getZHelixE()[3];
     wtrk_zHel[4] = trk->getZHelixE()[4]+em_calmean_d2[4]*sqrt(wem_zerr[4][4])+wem_zgen[2];

  }

  if(trk->charge()>0 && n==1){
//mup
     HepSymMatrix wmup_zerr(5,0);
     wmup_zerr = trk->getZErrorMu();
     HepSymMatrix wmup_zcal(3,0);

     wmup_zcal[0][0] = (mup_calerr_d2[1]*mup_calerr_d2[1]-1)*wmup_zerr[1][1];
     wmup_zcal[1][1] = (mup_calerr_d2[2]*mup_calerr_d2[2]-1)*wmup_zerr[2][2];
     wmup_zcal[2][2] = (mup_calerr_d2[4]*mup_calerr_d2[4]-1)*wmup_zerr[4][4];

     HepMatrix wmup_zerrc(3,3,0);
     TrackCorrection::corset(wmup_zcal,wmup_zerrc,3);
     HepVector wmup_zgen(3,0);
     TrackCorrection::corgen(wmup_zerrc,wmup_zgen,3);

     wtrk_zHel[0] = trk->getZHelixMu()[0];
     wtrk_zHel[1] = trk->getZHelixMu()[1]+mup_calmean_d2[1]*sqrt(wmup_zerr[1][1])+wmup_zgen[0];
     wtrk_zHel[2] = trk->getZHelixMu()[2]+mup_calmean_d2[2]*sqrt(wmup_zerr[2][2])+wmup_zgen[1];
     wtrk_zHel[3] = trk->getZHelixMu()[3];
     wtrk_zHel[4] = trk->getZHelixMu()[4]+mup_calmean_d2[4]*sqrt(wmup_zerr[4][4])+wmup_zgen[2];

  }

  if(trk->charge()<0 && n==1)
  {
  //mum
     HepSymMatrix wmum_zerr(5,0);
     wmum_zerr = trk->getZErrorMu();

     HepSymMatrix wmum_zcal(3,0);

     wmum_zcal[0][0] = (mum_calerr_d2[1]*mum_calerr_d2[1]-1)*wmum_zerr[1][1];
     wmum_zcal[1][1] = (mum_calerr_d2[2]*mum_calerr_d2[2]-1)*wmum_zerr[2][2];
     wmum_zcal[2][2] = (mum_calerr_d2[4]*mum_calerr_d2[4]-1)*wmum_zerr[4][4];

     HepMatrix wmum_zerrc(3,3,0);
     TrackCorrection::corset(wmum_zcal,wmum_zerrc,3);
     HepVector wmum_zgen(3,0);
     TrackCorrection::corgen(wmum_zerrc,wmum_zgen,3);


     wtrk_zHel[0] = trk->getZHelixMu()[0];
     wtrk_zHel[1] = trk->getZHelixMu()[1]+mum_calmean_d2[1]*sqrt(wmum_zerr[1][1])+wmum_zgen[0];
     wtrk_zHel[2] = trk->getZHelixMu()[2]+mum_calmean_d2[2]*sqrt(wmum_zerr[2][2])+wmum_zgen[1];
     wtrk_zHel[3] = trk->getZHelixMu()[3];
     wtrk_zHel[4] = trk->getZHelixMu()[4]+mum_calmean_d2[4]*sqrt(wmum_zerr[4][4])+wmum_zgen[2];

  }


  if(trk->charge()>0 && n==2){
//pip
     HepSymMatrix wpip_zerr(5,0);
     wpip_zerr = trk->getZError();
     HepSymMatrix wpip_zcal(3,0);

     wpip_zcal[0][0] = (pip_calerr_d2[1]*pip_calerr_d2[1]-1)*wpip_zerr[1][1];
     wpip_zcal[1][1] = (pip_calerr_d2[2]*pip_calerr_d2[2]-1)*wpip_zerr[2][2];
     wpip_zcal[2][2] = (pip_calerr_d2[4]*pip_calerr_d2[4]-1)*wpip_zerr[4][4];

     HepMatrix wpip_zerrc(3,3,0);
     TrackCorrection::corset(wpip_zcal,wpip_zerrc,3);
     HepVector wpip_zgen(3,0);
     TrackCorrection::corgen(wpip_zerrc,wpip_zgen,3);

     wtrk_zHel[0] = trk->getZHelix()[0];
     wtrk_zHel[1] = trk->getZHelix()[1]+pip_calmean_d2[1]*sqrt(wpip_zerr[1][1])+wpip_zgen[0];
     wtrk_zHel[2] = trk->getZHelix()[2]+pip_calmean_d2[2]*sqrt(wpip_zerr[2][2])+wpip_zgen[1];
     wtrk_zHel[3] = trk->getZHelix()[3];
     wtrk_zHel[4] = trk->getZHelix()[4]+pip_calmean_d2[4]*sqrt(wpip_zerr[4][4])+wpip_zgen[2];

  }

  if(trk->charge()<0 && n==2)
  {
  //pim
     HepSymMatrix wpim_zerr(5,0);
     wpim_zerr = trk->getZError();

     HepSymMatrix wpim_zcal(3,0);

     wpim_zcal[0][0] = (pim_calerr_d2[1]*pim_calerr_d2[1]-1)*wpim_zerr[1][1];
     wpim_zcal[1][1] = (pim_calerr_d2[2]*pim_calerr_d2[2]-1)*wpim_zerr[2][2];
     wpim_zcal[2][2] = (pim_calerr_d2[4]*pim_calerr_d2[4]-1)*wpim_zerr[4][4];

     HepMatrix wpim_zerrc(3,3,0);
     TrackCorrection::corset(wpim_zcal,wpim_zerrc,3);
     HepVector wpim_zgen(3,0);
     TrackCorrection::corgen(wpim_zerrc,wpim_zgen,3);


     wtrk_zHel[0] = trk->getZHelix()[0];
     wtrk_zHel[1] = trk->getZHelix()[1]+pim_calmean_d2[1]*sqrt(wpim_zerr[1][1])+wpim_zgen[0];
     wtrk_zHel[2] = trk->getZHelix()[2]+pim_calmean_d2[2]*sqrt(wpim_zerr[2][2])+wpim_zgen[1];
     wtrk_zHel[3] = trk->getZHelix()[3];
     wtrk_zHel[4] = trk->getZHelix()[4]+pim_calmean_d2[4]*sqrt(wpim_zerr[4][4])+wpim_zgen[2];

  }

  if(trk->charge()>0 && n==3)
  {
//kp
     HepSymMatrix wkp_zerr(5,0);
     wkp_zerr = trk->getZErrorK();

     HepSymMatrix wkp_zcal(3,0);

     wkp_zcal[0][0] = (kp_calerr_d2[1]*kp_calerr_d2[1]-1)*wkp_zerr[1][1];
     wkp_zcal[1][1] = (kp_calerr_d2[2]*kp_calerr_d2[2]-1)*wkp_zerr[2][2];
     wkp_zcal[2][2] = (kp_calerr_d2[4]*kp_calerr_d2[4]-1)*wkp_zerr[4][4];

     HepMatrix wkp_zerrc(3,3,0);
     TrackCorrection::corset(wkp_zcal,wkp_zerrc,3);
     HepVector wkp_zgen(3,0);
     TrackCorrection::corgen(wkp_zerrc,wkp_zgen,3);

     wtrk_zHel[0] = trk->getZHelixK()[0];
     wtrk_zHel[1] = trk->getZHelixK()[1]+kp_calmean_d2[1]*sqrt(wkp_zerr[1][1])+wkp_zgen[0];
     wtrk_zHel[2] = trk->getZHelixK()[2]+kp_calmean_d2[2]*sqrt(wkp_zerr[2][2])+wkp_zgen[1];
     wtrk_zHel[3] = trk->getZHelixK()[3];
     wtrk_zHel[4] = trk->getZHelixK()[4]+kp_calmean_d2[4]*sqrt(wkp_zerr[4][4])+wkp_zgen[2];

  }

  if(trk->charge()<0 && n==3)
  {
//km
     HepSymMatrix wkm_zerr(5,0);
     wkm_zerr = trk->getZErrorK();

     HepSymMatrix wkm_zcal(3,0);

     wkm_zcal[0][0] = (km_calerr_d2[1]*km_calerr_d2[1]-1)*wkm_zerr[1][1];
     wkm_zcal[1][1] = (km_calerr_d2[2]*km_calerr_d2[2]-1)*wkm_zerr[2][2];
     wkm_zcal[2][2] = (km_calerr_d2[4]*km_calerr_d2[4]-1)*wkm_zerr[4][4];

     HepMatrix wkm_zerrc(3,3,0);
     TrackCorrection::corset(wkm_zcal,wkm_zerrc,3);
     HepVector wkm_zgen(3,0);
     TrackCorrection::corgen(wkm_zerrc,wkm_zgen,3);

     wtrk_zHel[0] = trk->getZHelixK()[0];
     wtrk_zHel[1] = trk->getZHelixK()[1]+km_calmean_d2[1]*sqrt(wkm_zerr[1][1])+wkm_zgen[0];
     wtrk_zHel[2] = trk->getZHelixK()[2]+km_calmean_d2[2]*sqrt(wkm_zerr[2][2])+wkm_zgen[1];
     wtrk_zHel[3] = trk->getZHelixK()[3];
     wtrk_zHel[4] = trk->getZHelixK()[4]+km_calmean_d2[4]*sqrt(wkm_zerr[4][4])+wkm_zgen[2];

  }

  if(trk->charge()>0 && n==4)
  {
//prtp
     HepSymMatrix wprtp_zerr(5,0);
     wprtp_zerr = trk->getZErrorP();

     HepSymMatrix wprtp_zcal(3,0);

     wprtp_zcal[0][0] = (prtp_calerr_d2[1]*prtp_calerr_d2[1]-1)*wprtp_zerr[1][1];
     wprtp_zcal[1][1] = (prtp_calerr_d2[2]*prtp_calerr_d2[2]-1)*wprtp_zerr[2][2];
     wprtp_zcal[2][2] = (prtp_calerr_d2[4]*prtp_calerr_d2[4]-1)*wprtp_zerr[4][4];

     HepMatrix wprtp_zerrc(3,3,0);
     TrackCorrection::corset(wprtp_zcal,wprtp_zerrc,3);
     HepVector wprtp_zgen(3,0);
     TrackCorrection::corgen(wprtp_zerrc,wprtp_zgen,3);

     wtrk_zHel[0] = trk->getZHelixP()[0];
     wtrk_zHel[1] = trk->getZHelixP()[1]+prtp_calmean_d2[1]*sqrt(wprtp_zerr[1][1])+wprtp_zgen[0];
     wtrk_zHel[2] = trk->getZHelixP()[2]+prtp_calmean_d2[2]*sqrt(wprtp_zerr[2][2])+wprtp_zgen[1];
     wtrk_zHel[3] = trk->getZHelixP()[3];
     wtrk_zHel[4] = trk->getZHelixP()[4]+prtp_calmean_d2[4]*sqrt(wprtp_zerr[4][4])+wprtp_zgen[2];

  }

  if(trk->charge()<0 && n==4)
  {
//prtm
     HepSymMatrix wprtm_zerr(5,0);
     wprtm_zerr = trk->getZErrorP();

     HepSymMatrix wprtm_zcal(3,0);

     wprtm_zcal[0][0] = (prtm_calerr_d2[1]*prtm_calerr_d2[1]-1)*wprtm_zerr[1][1];
     wprtm_zcal[1][1] = (prtm_calerr_d2[2]*prtm_calerr_d2[2]-1)*wprtm_zerr[2][2];
     wprtm_zcal[2][2] = (prtm_calerr_d2[4]*prtm_calerr_d2[4]-1)*wprtm_zerr[4][4];

     HepMatrix wprtm_zerrc(3,3,0);
     TrackCorrection::corset(wprtm_zcal,wprtm_zerrc,3);
     HepVector wprtm_zgen(3,0);
     TrackCorrection::corgen(wprtm_zerrc,wprtm_zgen,3);

     wtrk_zHel[0] = trk->getZHelixP()[0];
     wtrk_zHel[1] = trk->getZHelixP()[1]+prtm_calmean_d2[1]*sqrt(wprtm_zerr[1][1])+wprtm_zgen[0];
     wtrk_zHel[2] = trk->getZHelixP()[2]+prtm_calmean_d2[2]*sqrt(wprtm_zerr[2][2])+wprtm_zgen[1];
     wtrk_zHel[3] = trk->getZHelixP()[3];
     wtrk_zHel[4] = trk->getZHelixP()[4]+prtm_calmean_d2[4]*sqrt(wprtm_zerr[4][4])+wprtm_zgen[2];

  }

}

