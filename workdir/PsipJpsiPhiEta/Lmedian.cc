// {{{1

//----------------------------------------------------------------------
constexpr double SQ(double x) {
//----------------------------------------------------------------------
   return x*x;
}

//----------------------------------------------------------------------
TGraph* GrL() {
//----------------------------------------------------------------------
   vector<double> br_phi {
      7.300e-04,
         7.350e-04,
         7.400e-04,
         7.450e-04,
         7.500e-04,
         7.550e-04,
         7.600e-04,
         7.650e-04,
         7.700e-04,
         7.750e-04,
         7.800e-04,
         7.850e-04,
         7.900e-04,
         7.950e-04,
         8.000e-04,
         8.050e-04,
         8.100e-04,
         8.150e-04,
         8.200e-04,
         8.250e-04,
         8.300e-04,
         8.350e-04,
         8.400e-04,
         8.450e-04,
         8.500e-04,
         8.550e-04,
         8.600e-04,
         8.650e-04,
         8.700e-04,
         8.750e-04,
         8.800e-04,
         8.850e-04,
         8.900e-04,
         8.950e-04,
         9.000e-04,
         9.050e-04,
         9.100e-04,
         9.150e-04,
         9.200e-04,
         9.250e-04,
         9.300e-04,
         9.350e-04,
         9.400e-04,
         9.450e-04,
         9.500e-04,
   };
   for( auto &b : br_phi ) {
      b *= 1e4;
   }

/*
   vector<double> Lmin {
      -76807.599,
         -76809.215,
         -76810.699,
         -76812.054,
         -76813.285,
         -76814.397,
         -76815.393,
         -76816.279,
         -76817.060,
         -76817.740,
         -76818.325,
         -76818.821,
         -76819.234,
         -76819.570,
         -76819.836,
         -76820.039,
         -76820.187,
         -76820.289,
         -76820.352,
         -76820.387,
         -76820.402,
         -76820.406,
         -76820.408,
         -76820.413,
         -76820.424,
         -76820.440,
         -76820.456,
         -76820.463,
         -76820.448,
         -76820.399,
         -76820.302,
         -76820.145,
         -76819.915,
         -76819.605,
         -76819.204,
         -76818.705,
         -76818.102,
         -76817.390,
         -76816.564,
         -76815.620,
         -76814.556,
         -76813.368,
         -76812.053,
         -76810.612,
         -76809.040,
   }; // std: ar2 ch60
*/
/*
   vector<double> Lmin {
      -83670.900,
         -83672.428,
         -83673.823,
         -83675.089,
         -83676.232,
         -83677.255,
         -83678.165,
         -83678.965,
         -83679.663,
         -83680.263,
         -83680.771,
         -83681.194,
         -83681.538,
         -83681.810,
         -83682.018,
         -83682.169,
         -83682.272,
         -83682.335,
         -83682.367,
         -83682.376,
         -83682.373,
         -83682.364,
         -83682.357,
         -83682.357,
         -83682.367,
         -83682.386,
         -83682.409,
         -83682.430,
         -83682.438,
         -83682.422,
         -83682.371,
         -83682.272,
         -83682.115,
         -83681.889,
         -83681.585,
         -83681.195,
         -83680.712,
         -83680.130,
         -83679.442,
         -83678.644,
         -83677.733,
         -83676.704,
         -83675.555,
         -83674.283,
         -83672.886,
   }; // ar2 ch150
*/
/*
   vector<double> Lmin {
      -76803.488,
         -76805.106,
         -76806.592,
         -76807.949,
         -76809.184,
         -76810.299,
         -76811.299,
         -76812.190,
         -76812.976,
         -76813.662,
         -76814.254,
         -76814.758,
         -76815.178,
         -76815.523,
         -76815.797,
         -76816.010,
         -76816.168,
         -76816.279,
         -76816.352,
         -76816.396,
         -76816.419,
         -76816.430,
         -76816.437,
         -76816.444,
         -76816.455,
         -76816.468,
         -76816.478,
         -76816.477,
         -76816.453,
         -76816.393,
         -76816.285,
         -76816.116,
         -76815.876,
         -76815.554,
         -76815.143,
         -76814.634,
         -76814.022,
         -76813.301,
         -76812.467,
         -76811.515,
         -76810.443,
         -76809.248,
         -76807.927,
         -76806.479,
         -76804.902,
   }; // ar1 ch60
*/
/*
   vector<double> Lmin {
      -72019.783,
         -72021.355,
         -72022.802,
         -72024.128,
         -72025.337,
         -72026.433,
         -72027.421,
         -72028.304,
         -72029.089,
         -72029.778,
         -72030.378,
         -72030.894,
         -72031.332,
         -72031.697,
         -72031.997,
         -72032.236,
         -72032.423,
         -72032.565,
         -72032.670,
         -72032.743,
         -72032.794,
         -72032.827,
         -72032.846,
         -72032.855,
         -72032.851,
         -72032.831,
         -72032.787,
         -72032.709,
         -72032.587,
         -72032.411,
         -72032.170,
         -72031.855,
         -72031.456,
         -72030.968,
         -72030.383,
         -72029.696,
         -72028.902,
         -72027.998,
         -72026.979,
         -72025.844,
         -72024.590,
         -72023.214,
         -72021.716,
         -72020.093,
         -72018.346,
   }; // ar1 ch40
*/
/*
   vector<double> Lmin {
      -66114.095,
         -66115.497,
         -66116.785,
         -66117.965,
         -66119.039,
         -66120.012,
         -66120.888,
         -66121.672,
         -66122.367,
         -66122.979,
         -66123.511,
         -66123.970,
         -66124.361,
         -66124.689,
         -66124.959,
         -66125.178,
         -66125.352,
         -66125.486,
         -66125.585,
         -66125.656,
         -66125.702,
         -66125.724,
         -66125.722,
         -66125.695,
         -66125.637,
         -66125.542,
         -66125.402,
         -66125.208,
         -66124.952,
         -66124.625,
         -66124.221,
         -66123.732,
         -66123.153,
         -66122.479,
         -66121.705,
         -66120.828,
         -66119.845,
         -66118.752,
         -66117.548,
         -66116.231,
         -66114.799,
         -66113.251,
         -66111.586,
         -66109.803,
         -66107.900,
   }; // ar1 ch30
*/
/*
   vector<double> Lmin {
      -54013.744,
         -54014.669,
         -54015.501,
         -54016.242,
         -54016.897,
         -54017.469,
         -54017.962,
         -54018.380,
         -54018.728,
         -54019.010,
         -54019.230,
         -54019.395,
         -54019.510,
         -54019.581,
         -54019.615,
         -54019.619,
         -54019.603,
         -54019.575,
         -54019.544,
         -54019.521,
         -54019.514,
         -54019.528,
         -54019.566,
         -54019.619,
         -54019.679,
         -54019.729,
         -54019.754,
         -54019.740,
         -54019.675,
         -54019.548,
         -54019.352,
         -54019.079,
         -54018.723,
         -54018.280,
         -54017.747,
         -54017.119,
         -54016.396,
         -54015.574,
         -54014.651,
         -54013.628,
         -54012.502,
         -54011.272,
         -54009.939,
         -54008.501,
         -54006.959,
   }; // ar1 ch20
*/
/*
   vector<double> Lmin {
      -74882.127,
         -74883.647,
         -74885.039,
         -74886.305,
         -74887.451,
         -74888.480,
         -74889.397,
         -74890.208,
         -74890.916,
         -74891.528,
         -74892.048,
         -74892.483,
         -74892.838,
         -74893.121,
         -74893.337,
         -74893.495,
         -74893.603,
         -74893.669,
         -74893.703,
         -74893.714,
         -74893.712,
         -74893.706,
         -74893.704,
         -74893.712,
         -74893.730,
         -74893.757,
         -74893.784,
         -74893.800,
         -74893.790,
         -74893.740,
         -74893.637,
         -74893.468,
         -74893.222,
         -74892.889,
         -74892.462,
         -74891.934,
         -74891.298,
         -74890.551,
         -74889.687,
         -74888.705,
         -74887.600,
         -74886.370,
         -74885.014,
         -74883.530,
         -74881.917,
   }; // ar1 ch50
*/
/*
   vector<double> Lmin {
      -79149.049,
         -79150.568,
         -79151.955,
         -79153.213,
         -79154.346,
         -79155.361,
         -79156.260,
         -79157.050,
         -79157.736,
         -79158.323,
         -79158.816,
         -79159.223,
         -79159.549,
         -79159.802,
         -79159.989,
         -79160.118,
         -79160.197,
         -79160.236,
         -79160.244,
         -79160.232,
         -79160.209,
         -79160.186,
         -79160.170,
         -79160.169,
         -79160.186,
         -79160.217,
         -79160.257,
         -79160.296,
         -79160.320,
         -79160.314,
         -79160.264,
         -79160.157,
         -79159.982,
         -79159.726,
         -79159.382,
         -79158.941,
         -79158.396,
         -79157.743,
         -79156.975,
         -79156.090,
         -79155.083,
         -79153.953,
         -79152.695,
         -79151.308,
         -79149.791,
   }; // ar1 ch80
*/
/*
   vector<double> Lmin {
      -80756.149,
         -80757.732,
         -80759.182,
         -80760.503,
         -80761.701,
         -80762.779,
         -80763.743,
         -80764.598,
         -80765.348,
         -80766.001,
         -80766.561,
         -80767.034,
         -80767.427,
         -80767.746,
         -80768.000,
         -80768.194,
         -80768.338,
         -80768.438,
         -80768.505,
         -80768.545,
         -80768.568,
         -80768.581,
         -80768.589,
         -80768.597,
         -80768.605,
         -80768.611,
         -80768.610,
         -80768.594,
         -80768.552,
         -80768.473,
         -80768.345,
         -80768.158,
         -80767.901,
         -80767.564,
         -80767.140,
         -80766.622,
         -80766.002,
         -80765.275,
         -80764.437,
         -80763.484,
         -80762.412,
         -80761.218,
         -80759.900,
         -80758.455,
         -80756.881,
   }; // ar1 ch100
*/
   vector<double> Lmin {
      -80759.595,
         -80761.174,
         -80762.619,
         -80763.935,
         -80765.128,
         -80766.201,
         -80767.159,
         -80768.008,
         -80768.753,
         -80769.399,
         -80769.952,
         -80770.419,
         -80770.805,
         -80771.118,
         -80771.364,
         -80771.551,
         -80771.688,
         -80771.782,
         -80771.842,
         -80771.877,
         -80771.895,
         -80771.904,
         -80771.909,
         -80771.916,
         -80771.925,
         -80771.934,
         -80771.937,
         -80771.927,
         -80771.891,
         -80771.820,
         -80771.700,
         -80771.520,
         -80771.271,
         -80770.943,
         -80770.527,
         -80770.016,
         -80769.403,
         -80768.684,
         -80767.853,
         -80766.907,
         -80765.841,
         -80764.653,
         -80763.341,
         -80761.901,
         -80760.333,
   }; // ar2 ch100 sl=1.85

   // calculate rL = L / Lmax:
   vector<double> rL;
   double minL = *(min_element(Lmin.begin(),Lmin.end()));
   for( auto &l : Lmin ) {
      l -= minL;
      rL.push_back(exp(-0.5*l));
   }

   TGraph* grL = new TGraph( rL.size(),br_phi.data(),rL.data() );
   grL -> SetTitle(";Br(#phi#eta) #times 10^{4};#it{L/L_{max}}");
   grL -> GetYaxis() -> SetMaxDigits(3);
   grL -> GetYaxis() -> SetTitleOffset(1.);
   grL -> SetMarkerColor(kBlue);
   grL -> SetMarkerStyle(20);
   grL -> SetMaximum(1.1);
   grL -> SetMinimum(0.0);

   return grL;
}

//----------------------------------------------------------------------
double Median(const TGraph* gr) {
//----------------------------------------------------------------------
   int n = gr -> GetN();
   const double* x = gr -> GetX();
   const double* w = gr -> GetY();
   return TMath::Median(n, x, w);
}

// return median M and confidence interval [L,R] around M
// such that prob[LM] = prob[MR] = CL/2
//----------------------------------------------------------------------
vector<double> ConfInt(const TGraph* gr, double CL) {
//----------------------------------------------------------------------
   double cl = 0.5*CL;

   int n = gr -> GetN();
   const double* x = gr -> GetX();
   const double* y = gr -> GetY();
   vector<double> w(y,y+n);
   partial_sum(begin(w), end(w), begin(w));
   // normalization to one
   auto sw = w.back();
   for (auto& v : w ) {
      v /= sw;
   }

   // find median (0.5), left (0.5-cl) and right (0.5+cl)
   // ret(3+i) is value of gr->y() for ret(i)
   vector<double> p {0.5,0.5-cl,0.5+cl};
//    vector<double> p {0.53,0.53-cl,0.53+cl};
   vector<double> ret(6,0);
   for( int i = 0; i < 3; i++ ) {
      auto pU = upper_bound(begin(w),end(w),p[i]);
      // linear extrapolation
      int j = distance(begin(w), pU);
      if (j > 0 && j < n ) {
         double dw = w[j] - w[j-1];
         double dx = x[j] - x[j-1];
         double dy = y[j] - y[j-1];
         ret[i]   = x[j-1] + dx*(p[i]-w[j-1])/dw;
         ret[3+i] = y[j-1] + dy*(p[i]-w[j-1])/dw;
      }
   }

   return ret;
}

// return median M and symmatric confidence interval [L,R] around M
// such that |LM| = |MR| and prob[LR] = CL
//----------------------------------------------------------------------
vector<double> SymConfInt(const TGraph* gr, double CL) {
//----------------------------------------------------------------------
   int n = gr -> GetN();
   const double* x = gr -> GetX();
   const double* y = gr -> GetY();
   vector<double> w(y,y+n);
   partial_sum(begin(w), end(w), begin(w));
   // normalization to one
   auto sw = w.back();
   for (auto& v : w ) {
      v /= sw;
   }

   // initial estimation:
   double cl = 0.5*CL;
   double cr = 0.5*CL;
   // find median (0.5), left (0.5-cl) and right (0.5+cr)
   // ret(3+i) is value of gr->y() for ret(i)
   vector<double> ret(6,0);
   for ( int iter = 0; iter < 10; ++iter ) {
      vector<double> p {0.5,0.5-cl,0.5+cr};
      for( int i = 1 - (iter==0); i < 3; i++ ) {
         auto pU = upper_bound(begin(w),end(w),p[i]);
         // linear extrapolation
         int j = distance(begin(w), pU);
         if (j > 0 && j < n ) {
            double dw = w[j] - w[j-1];
            double dx = x[j] - x[j-1];
            double dy = y[j] - y[j-1];
            ret[i]   = x[j-1] + dx*(p[i]-w[j-1])/dw;
            ret[3+i] = y[j-1] + dy*(p[i]-w[j-1])/dw;
         }
      }
      // check that |LM| = |MR|
      double LM = ret[0]-ret[1];
      double MR = ret[2]-ret[0];
      if ( fabs(LM-MR) < 1e-3 ) {
         break;
      } else if ( LM > MR ) {
         cr *= 1 + 0.5*(LM-MR)/(LM+MR);
         cl = CL-cr;
      } else { // MR > LM
         cl *= 1 + 0.5*(MR-LM)/(LM+MR);
         cr = CL-cl;
      }
      // debug prints:
      printf("median= %.4f in [%.4f,%.4f]\n",ret[0],ret[1],ret[2]);
      printf("new cl=%.4f new cr=%.4f\n",cl,cr);
   }
   return ret;
}

// {{{1 MAIN:
//-------------------------------------------------------------------------
void Lmedian() {
//-------------------------------------------------------------------------
   gROOT->Reset();
   gStyle->SetOptStat(0);
   gStyle->SetStatFont(62);

   TGraph* gr = GrL();
//    double Bmed = Median( gr );
//    vector<double> Mcl = ConfInt(gr,0.683);
   vector<double> Mcl = SymConfInt(gr,0.683);
   printf("Br_median= %.3f and cl=[%.3f,%.3f]\n",Mcl[0],Mcl[1],Mcl[2]);

   TLatex* tt[3];
   TLine* ll[3];
   for ( int i = 0; i < 3; i++ ) {
      auto Tcol = (i==0) ? kGreen+3 : kRed+1;
      auto& ti = tt[i];
      ti = new TLatex(Mcl[i]-0.07, 0.1, Form("%.2f",Mcl[i]));
      ti -> SetTextSize(0.03);
      ti -> SetTextAlign(12); // centered
      ti -> SetTextAngle(90);
      ti -> SetTextColor(Tcol);

      auto& li = ll[i];
      li = new TLine;
      li -> SetLineColor(Tcol);
      li -> SetLineWidth(2);
      li -> SetLineStyle((i==0) ? 7 : 9);
   }


   TCanvas* c1 = new TCanvas("c1","...",0,0,800,800);
   c1 -> cd();
   gPad -> SetGrid();

   gr -> Draw("APL");

   for ( int i = 0; i < 3; i++ ) {
      ll[i] -> DrawLine(Mcl[i],0.,Mcl[i],Mcl[3+i]);
      tt[i] -> Draw();
   }

   gPad -> RedrawAxis();
   c1 -> Update();
}
